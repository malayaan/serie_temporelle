temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer et afficher des statistiques descriptives
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Tracer le graphique original avec ggplot2
p <- ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer la moyenne mobile pour identifier une tendance
window_size <- 30  # taille de la fenêtre pour la moyenne mobile (à ajuster selon vos données)
temp_dijon$TAVG_MA <- runMean(temp_dijon$TAVG_Celsius, n = window_size, cumulative = FALSE)
# Ajouter la tendance au graphique
p <- p + geom_line(aes(x = Date, y = temp_dijon$TAVG_MA), colour = "blue")
# Utiliser les séries temporelles pour identifier la saisonnalité
ts_temp <- ts(temp_dijon$TAVG_Celsius, frequency = 12) # à ajuster selon vos données
decomposed <- stl(ts_temp, s.window = "periodic", robust = TRUE)
seasonal <- as.numeric(decomposed$time.series[,1])
# Ajouter la saisonnalité au dataframe et au graphique
temp_dijon$Seasonal <- seasonal[1:nrow(temp_dijon)]
p <- p + geom_line(aes(x = Date, y = Seasonal), colour = "red")
# Afficher le graphique
print(p)
install.packages("TTR")
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Ne garder que les deux premières colonnes
temp_dijon <- temp_dijon[, 1:2]
# Convertir la température moyenne de Fahrenheit à Celsius pour la colonne 2
temp_dijon[, 2] <- (temp_dijon[, 2] - 32) * 5/9
# S'assurer que la colonne de date est au format Date
temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Charger la bibliothèque ggplot2
library(ggplot2)
#install.packages("TTR")
library(TTR)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Ne garder que les deux premières colonnes
temp_dijon <- temp_dijon[, 1:2]
# Convertir la température moyenne de Fahrenheit à Celsius pour la colonne 2
temp_dijon[, 2] <- (temp_dijon[, 2] - 32) * 5/9
# S'assurer que la colonne de date est au format Date
temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer et afficher des statistiques descriptives
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Tracer le graphique original avec ggplot2
p <- ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer la moyenne mobile pour identifier une tendance
window_size <- 30  # taille de la fenêtre pour la moyenne mobile (à ajuster selon vos données)
temp_dijon$TAVG_MA <- runMean(temp_dijon$TAVG_Celsius, n = window_size, cumulative = FALSE)
# Ajouter la tendance au graphique
p <- p + geom_line(aes(x = Date, y = temp_dijon$TAVG_MA), colour = "blue")
# Utiliser les séries temporelles pour identifier la saisonnalité
ts_temp <- ts(temp_dijon$TAVG_Celsius, frequency = 12) # à ajuster selon vos données
decomposed <- stl(ts_temp, s.window = "periodic", robust = TRUE)
seasonal <- as.numeric(decomposed$time.series[,1])
# Ajouter la saisonnalité au dataframe et au graphique
temp_dijon$Seasonal <- seasonal[1:nrow(temp_dijon)]
p <- p + geom_line(aes(x = Date, y = Seasonal), colour = "red")
# Afficher le graphique
print(p)
# Charger la bibliothèque ggplot2
library(ggplot2)
#install.packages("TTR")
library(TTR)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Ne garder que les deux premières colonnes
temp_dijon <- temp_dijon[, 1:2]
# Convertir la température moyenne de Fahrenheit à Celsius pour la colonne 2
temp_dijon[, 2] <- (temp_dijon[, 2] - 32) * 5/9
# S'assurer que la colonne de date est au format Date
temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer et afficher des statistiques descriptives
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Charger la bibliothèque ggplot2
library(ggplot2)
# Chargement de la bibliothèque TTR
library(TTR)
# Chargement de la bibliothèque dplyr pour la manipulation de données
library(dplyr)
# Chargement de la bibliothèque gridExtra pour afficher plusieurs graphiques en grille
library(gridExtra)
# Assurer que la colonne de date est au format Date
temp_dijon[, 1] <- mdy(temp_dijon[, 1]) # Utiliser mdy() pour convertir m/d/y à Date
# Charger la bibliothèque ggplot2
library(ggplot2)
# Chargement de la bibliothèque TTR
library(TTR)
# Chargement de la bibliothèque dplyr pour la manipulation de données
library(dplyr)
# Chargement de la bibliothèque gridExtra pour afficher plusieurs graphiques en grille
library(gridExtra)
if (!requireNamespace("lubridate", quietly = TRUE)) {
install.packages("lubridate")
}
library(lubridate)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Ne garder que les deux premières colonnes
temp_dijon <- temp_dijon[, 1:2]
# Convertir la température moyenne de Fahrenheit à Celsius pour la colonne 2
temp_dijon[, 2] <- (temp_dijon[, 2] - 32) * 5/9
# S'assurer que la colonne de date est au format Date
temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer et afficher des statistiques descriptives
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Assurer que la colonne de date est au format Date
temp_dijon[, 1] <- mdy(temp_dijon[, 1]) # Utiliser mdy() pour convertir m/d/y à Date
# [Reste du code inchangé]
# S'assurer que la colonne de date est en format de série chronologique (ts)
année_de_début <- year(temp_dijon$Date[1])
mois_de_début <- month(temp_dijon$Date[1])
temp_dijon_ts <- ts(temp_dijon$TAVG_Celsius, start=c(année_de_début, mois_de_début), frequency=12)
# Charger les bibliothèques nécessaires
library(ggplot2)
library(TTR)
library(tidyverse)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Ne garder que les deux premières colonnes
temp_dijon <- temp_dijon[, 1:2]
# Convertir la température moyenne de Fahrenheit à Celsius pour la colonne 2
temp_dijon[, 2] <- (temp_dijon[, 2] - 32) * 5/9
# S'assurer que la colonne de date est au format Date
temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer et afficher des statistiques descriptives
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# (Adaptez la fréquence (freq) selon vos données. Exemple : pour des données mensuelles, utilisez freq = 12)
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(année_de_début, mois_de_début), frequency = fréquence)
# (Adaptez la fréquence (freq) selon vos données. Exemple : pour des données mensuelles, utilisez freq = 12)
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(année_de_début, mois_de_début), frequency = 12)
library(ggplot2)
library(TTR)
library(tidyverse)
library(xts)
# Convertir les données en objet xts
temp_xts <- xts(temp_dijon$TAVG_Celsius, order.by = as.Date(temp_dijon$Date, format = "%m/%d/%Y"))
# Convertir l'objet xts en ts en supposant une fréquence approximative de 365.25 pour tenir compte des années bissextiles
temp_ts <- ts(coredata(temp_xts), start = c(2000, 1), frequency = 365.25)
# Décomposer la série temporelle
temp_decomposed <- decompose(temp_ts)
# Créer un graphique avec ggplot2
ggplot() +
geom_line(data = temp_dijon, aes(x = Date, y = TAVG_Celsius), colour = "blue") +
geom_line(data = temp_decomposed_df, aes(x = date, y = trend), colour = "red") +
geom_line(data = temp_decomposed_df, aes(x = date, y = seasonal), colour = "green") +
geom_line(data = temp_decomposed_df, aes(x = date, y = random), colour = "purple") +
labs(
x = "Date",
y = "Température (°C)",
title = "Décomposition de la série temporelle de la température à Dijon",
colour = "Composante"
) +
scale_colour_manual(
values = c("blue", "red", "green", "purple"),
labels = c("Original", "Tendance", "Saisonnalité", "Résiduel"),
name = ""
) +
theme_minimal()
# Convertir les données en objet xts
temp_xts <- xts(temp_dijon$TAVG_Celsius, order.by = as.Date(temp_dijon$Date, format = "%m/%d/%Y"))
# Convertir l'objet xts en ts en supposant une fréquence approximative de 365.25 pour tenir compte des années bissextiles
temp_ts <- ts(coredata(temp_xts), start = c(2000, 1), frequency = 365.25)
# Décomposer la série temporelle
temp_decomposed <- decompose(temp_ts)
# Convertir les composants en data frame pour ggplot
temp_decomposed_df <- data.frame(
date = as.Date(time(temp_decomposed$trend), origin = "1970-01-01"),
trend = as.numeric(temp_decomposed$trend),
seasonal = as.numeric(temp_decomposed$seasonal),
random = as.numeric(temp_decomposed$random)
)
# Convertir les composants en data frame pour ggplot
temp_decomposed_df <- data.frame(
date = as.Date(time(temp_decomposed$trend), origin = "2000-01-01"),
trend = as.numeric(temp_decomposed$trend),
seasonal = as.numeric(temp_decomposed$seasonal),
random = as.numeric(temp_decomposed$random)
)
date = as.Date(time(temp_decomposed$trend), origin = "2000-01-01"),
# Charger les bibliothèques nécessaires
library(ggplot2)
library(TTR)
library(tidyverse)
library(xts)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Ne garder que les deux premières colonnes
temp_dijon <- temp_dijon[, 1:2]
# Convertir la température moyenne de Fahrenheit à Celsius pour la colonne 2
temp_dijon[, 2] <- (temp_dijon[, 2] - 32) * 5/9
# S'assurer que la colonne de date est au format Date
temp_dijon[, 1] <- as.Date(temp_dijon[, 1], format = "%m/%d/%Y")
# Renommer les colonnes pour une meilleure compréhension
names(temp_dijon) <- c("Date", "TAVG_Celsius")
# Créer un graphique avec ggplot2
ggplot(temp_dijon, aes(x = Date, y = TAVG_Celsius)) +
geom_line() +
labs(x = "Date", y = "Température (°C)", title = "Température à Dijon au fil du temps") +
theme_minimal()
# Calculer et afficher des statistiques descriptives
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Convertir les données en objet xts
temp_xts <- xts(temp_dijon$TAVG_Celsius, order.by = as.Date(temp_dijon$Date, format = "%m/%d/%Y"))
# Convertir l'objet xts en ts en supposant une fréquence approximative de 365.25 pour tenir compte des années bissextiles
temp_ts <- ts(coredata(temp_xts), start = c(2000, 1), frequency = 365.25)
# Décomposer la série temporelle
temp_decomposed <- decompose(temp_ts)
# Convertir les composants en data frame pour ggplot
temp_decomposed_df <- data.frame(
date = as.Date(time(temp_decomposed$trend), origin = "2000-01-01"),
trend = as.numeric(temp_decomposed$trend),
seasonal = as.numeric(temp_decomposed$seasonal),
random = as.numeric(temp_decomposed$random)
)
# Convertir les composants en data frame pour ggplot
temp_decomposed_df <- data.frame(
date = as.Date(start(temp_decomposed$trend)[1] + time(temp_decomposed$trend) - 1, origin = "2000-01-01"),
trend = as.numeric(temp_decomposed$trend),
seasonal = as.numeric(temp_decomposed$seasonal),
random = as.numeric(temp_decomposed$random)
)
# Convertir les composants en data frame pour ggplot
temp_decomposed_df <- data.frame(
date = as.Date(start(temp_decomposed$trend)[1] + time(temp_decomposed$trend) - 1, origin = "2000-01-01"),
trend = as.numeric(temp_decomposed$trend),
seasonal = as.numeric(temp_decomposed$seasonal),
random = as.numeric(temp_decomposed$random)
)
# Assurez-vous que la date est en format Date et que la température est numérique
temp_dijon$Date <- as.Date(temp_dijon$Date, format = "%m/%d/%Y")
temp_dijon$TAVG_Celsius <- as.numeric(temp_dijon$TAVG_Celsius)
# Convertir le dataframe en série temporelle
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
# Décomposer la série temporelle
temp_decomposed <- decompose(temp_ts)
# Convertir l'objet de décomposition en dataframe pour utilisation avec ggplot2
temp_decomposed_df <- as.data.frame(cbind(
as.numeric(temp_decomposed$seasonal),
as.numeric(temp_decomposed$trend),
as.numeric(temp_decomposed$random)
), row.names = as.Date(cycle(temp_ts) + start(temp_ts)[1] - 1))
# Charger les bibliothèques nécessaires
library(ggplot2)
library(tidyverse)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Prétraitement des données
temp_dijon <- temp_dijon[, 1:2]
names(temp_dijon) <- c("Date", "TAVG_Celsius")
temp_dijon$Date <- as.Date(temp_dijon$Date, format = "%m/%d/%Y")
temp_dijon$TAVG_Celsius <- (temp_dijon$TAVG_Celsius - 32) * 5/9
# Analyse descriptive
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Série Temporelle et Décomposition
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
temp_decomposed <- decompose(temp_ts)
temp_decomposed_df <- data.frame(
Date = as.Date(cycle(temp_ts) + start(temp_ts)[1] - 1),
Saisonnalité = as.numeric(temp_decomposed$seasonal),
Tendance = as.numeric(temp_decomposed$trend),
Résidu = as.numeric(temp_decomposed$random)
)
# Conversion en data.frame
temp_decomposed_df <- data.frame(
Date = temp_dijon$Date,
Saisonnalité = as.numeric(temp_decomposed$seasonal),
Tendance = as.numeric(temp_decomposed$trend),
Résidu = as.numeric(temp_decomposed$random)
)
# Visualisation
temp_decomposed_df_long <- temp_decomposed_df %>%
pivot_longer(cols = -Date, names_to = "Composante", values_to = "Valeur")
ggplot(temp_decomposed_df_long, aes(x = Date, y = Valeur, color = Composante)) +
geom_line() +
labs(x = "Date", y = "Valeur", title = "Décomposition de la série temporelle") +
theme_minimal()
plot(temp_decomposed_df_long, aes(x = Date, y = Valeur, color = Composante)) +
geom_line() +
labs(x = "Date", y = "Valeur", title = "Décomposition de la série temporelle") +
theme_minimal()
plot(temp_decomposed)
# Extraire la série résiduelle
residual_series <- temp_decomposed$random
# Différentiation d'ordre 1
diff_residual_series <- diff(residual_series, differences = 1)
# Tracer la série résiduelle originale et la série différenciée
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre
plot(residual_series, main="Série Résiduelle Originale", ylab="Résidu", xlab="Temps")
plot(diff_residual_series, main="Série Résiduelle après Différentiation d'Ordre 1", ylab="Résidu Différencié", xlab="Temps")
install.packages("rugarch")
library(rugarch)
# Ajuster un modèle GARCH(1,1)
garch_model <- ugarchspec(variance.model = list(garchOrder = c(1, 1)))
garch_fit <- ugarchfit(spec = garch_model, data = diff_residual_series)
library(rugarch)
# Ajuster un modèle GARCH(1,1)
garch_model <- ugarchspec(variance.model = list(garchOrder = c(1, 1)))
garch_fit <- ugarchfit(spec = garch_model, data = diff_residual_series)
library(forecast)
install.packages("forecast")
library(forecast)
# Différentiation d'ordre 1
diff_residual_series <- diff(residual_series, differences = 1)
# Tracer la série résiduelle originale et la série différenciée
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre
plot(residual_series, main="Série Résiduelle Originale", ylab="Résidu", xlab="Temps")
plot(diff_residual_series, main="Série Résiduelle après Différentiation d'Ordre 1", ylab="Résidu Différencié", xlab="Temps")
# Extraire la série résiduelle de la décomposition précédente
residual_series <- temp_decomposed$random
# Eliminer les NA pour le calcul correct de l'ACF et PACF
residual_series <- residual_series[!is.na(residual_series)]
# Tracer l'ACF et la PACF
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre
acf(residual_series, main="Fonction d'Auto-Corrélation (ACF)")
pacf(residual_series, main="Fonction d'Auto-Corrélation Partielle (PACF)")
library(tidyr)
library(dplyr)
# Créer un dataframe avec les composants de la série temporelle décomposée
temp_decomposed_df <- data.frame(
Date = temp_dijon$Date,
Observed = temp_dijon$TAVG_Celsius,
Trend = as.numeric(temp_decomposed$trend),
Seasonal = as.numeric(temp_decomposed$seasonal),
Random = as.numeric(temp_decomposed$random)
)
# Calculer la série ajustée (tendance + saisonnalité)
temp_decomposed_df$Fitted <- temp_decomposed_df$Trend + temp_decomposed_df$Seasonal
# Visualisation avec ggplot2
ggplot(temp_decomposed_df, aes(x = Date)) +
geom_line(aes(y = Observed), color = "blue") +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed") +
labs(
x = "Date",
y = "Température (°C)",
title = "Modèle Ajusté et Série Originale",
subtitle = "Série originale en bleu et modèle ajusté en rouge"
) +
theme_minimal()
# Vérifier que le dernier point de données est avant le 1er janvier 2021
tail(temp_dijon)
# Si nécessaire, ajustez le début de la série temporelle
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
# Ajuster un modèle SARIMA automatique à la série temporelle
model_sarima <- auto.arima(temp_ts, seasonal = TRUE)
# Si nécessaire, ajustez le début de la série temporelle
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
# Ajuster un modèle SARIMA automatique à la série temporelle
model_sarima <- auto.arima(temp_ts, seasonal = TRUE)
model_sarima <- arima(temp_ts, order=(1,0,2),seasonal = TRUE)
model_sarima <- arima(temp_ts, order=(1,0,2))
model_sarima = arima(temp_ts, order=(1,0,2))
model_1 = arima(temp_ts, order=c(1,0,2))
# Ajuster un modèle SARIMA automatique à la série temporelle
model_sarima <- arima(temp_ts, order=c(1,0,2),seasonal = TRUE)
# Ajuster un modèle SARIMA automatique à la série temporelle
model_sarima <- auto.arima(temp_ts, order=c(1,0,2),seasonal = TRUE)
model_sarima <- arima(temp_ts, order=c(1,0,2))
# Prévoir la température pour le 1er janvier 2021
forecast_temp <- forecast(model_sarima, h=1) # h est le nombre de périodes à prévoir
forecast_temp
# Tracer les prévisions
plot(forecast_temp, main="Prévision de la Température", xlab="Date", ylab="Température (°C)")
# Charger les bibliothèques nécessaires
library(ggplot2)
library(tidyverse)
library(forecast)
library(tidyr)
library(dplyr)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")
# Prétraitement des données
temp_dijon <- temp_dijon[, 1:2]
names(temp_dijon) <- c("Date", "TAVG_Celsius")
temp_dijon$Date <- as.Date(temp_dijon$Date, format = "%m/%d/%Y")
temp_dijon$TAVG_Celsius <- (temp_dijon$TAVG_Celsius - 32) * 5/9
# Analyse descriptive
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)
cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")
# Série Temporelle et Décomposition
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
temp_decomposed <- decompose(temp_ts)
plot(temp_decomposed)
# Extraire la série résiduelle
residual_series <- temp_decomposed$random
# Différentiation d'ordre 1
diff_residual_series <- diff(residual_series, differences = 1)
# Tracer la série résiduelle originale et la série différenciée
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre
plot(residual_series, main="Série Résiduelle Originale", ylab="Résidu", xlab="Temps")
plot(diff_residual_series, main="Série Résiduelle après Différentiation d'Ordre 1", ylab="Résidu Différencié", xlab="Temps")
# Extraire la série résiduelle de la décomposition précédente
residual_series <- temp_decomposed$random
# Eliminer les NA pour le calcul correct de l'ACF et PACF
residual_series <- residual_series[!is.na(residual_series)]
# Tracer l'ACF et la PACF
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre
acf(residual_series, main="Fonction d'Auto-Corrélation (ACF)")
pacf(residual_series, main="Fonction d'Auto-Corrélation Partielle (PACF)")
# Créer un dataframe avec les composants de la série temporelle décomposée
temp_decomposed_df <- data.frame(
Date = temp_dijon$Date,
Observed = temp_dijon$TAVG_Celsius,
Trend = as.numeric(temp_decomposed$trend),
Seasonal = as.numeric(temp_decomposed$seasonal),
Random = as.numeric(temp_decomposed$random)
)
# Calculer la série ajustée (tendance + saisonnalité)
temp_decomposed_df$Fitted <- temp_decomposed_df$Trend + temp_decomposed_df$Seasonal
# Visualisation avec ggplot2
ggplot(temp_decomposed_df, aes(x = Date)) +
geom_line(aes(y = Observed), color = "blue") +
geom_line(aes(y = Fitted), color = "red", linetype = "dashed") +
labs(
x = "Date",
y = "Température (°C)",
title = "Modèle Ajusté et Série Originale",
subtitle = "Série originale en bleu et modèle ajusté en rouge"
) +
theme_minimal()
# Si nécessaire, ajustez le début de la série temporelle
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
# Ajuster un modèle SARIMA automatique à la série temporelle
model_sarima <- arima(temp_ts, order=c(1,0,2))
# Prévoir la température pour le 1er janvier 2021
forecast_temp <- forecast(model_sarima, h=1) # h est le nombre de périodes à prévoir
forecast_temp
