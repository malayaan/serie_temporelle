# Charger les bibliothèques nécessaires
library(ggplot2)
library(tidyverse)
library(forecast) 
library(tidyr)
library(dplyr)
# Importer les données
temp_dijon <- read.csv("Dijon.csv", sep = ",")

# Prétraitement des données
temp_dijon <- temp_dijon[, 1:2]
names(temp_dijon) <- c("Date", "TAVG_Celsius")
temp_dijon$Date <- as.Date(temp_dijon$Date, format = "%m/%d/%Y")
temp_dijon$TAVG_Celsius <- (temp_dijon$TAVG_Celsius - 32) * 5/9

# Analyse descriptive
mean_temp <- mean(temp_dijon$TAVG_Celsius, na.rm = TRUE)
range_temp <- range(temp_dijon$TAVG_Celsius, na.rm = TRUE)
sd_temp <- sd(temp_dijon$TAVG_Celsius, na.rm = TRUE)

cat("Moyenne de la température:", mean_temp, "\n")
cat("Plage de la température:", range_temp[1], "à", range_temp[2], "\n")
cat("Écart-type de la température:", sd_temp, "\n")

# Série Temporelle et Décomposition
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)
temp_decomposed <- decompose(temp_ts)
plot(temp_decomposed)

# Extraire la série résiduelle
residual_series <- temp_decomposed$random

# Différentiation d'ordre 1
diff_residual_series <- diff(residual_series, differences = 1)

# Tracer la série résiduelle originale et la série différenciée
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre
plot(residual_series, main="Série Résiduelle Originale", ylab="Résidu", xlab="Temps")
plot(diff_residual_series, main="Série Résiduelle après Différentiation d'Ordre 1", ylab="Résidu Différencié", xlab="Temps")

# Extraire la série résiduelle de la décomposition précédente
residual_series <- temp_decomposed$random

# Eliminer les NA pour le calcul correct de l'ACF et PACF
residual_series <- residual_series[!is.na(residual_series)]

# Tracer l'ACF et la PACF
par(mfrow=c(2,1)) # permet de créer 2 graphiques sur une même fenêtre

acf(residual_series, main="Fonction d'Auto-Corrélation (ACF)")
pacf(residual_series, main="Fonction d'Auto-Corrélation Partielle (PACF)")

# Créer un dataframe avec les composants de la série temporelle décomposée
temp_decomposed_df <- data.frame(
  Date = temp_dijon$Date,
  Observed = temp_dijon$TAVG_Celsius,
  Trend = as.numeric(temp_decomposed$trend),
  Seasonal = as.numeric(temp_decomposed$seasonal),
  Random = as.numeric(temp_decomposed$random)
)

# Calculer la série ajustée (tendance + saisonnalité)
temp_decomposed_df$Fitted <- temp_decomposed_df$Trend + temp_decomposed_df$Seasonal

# Visualisation avec ggplot2
ggplot(temp_decomposed_df, aes(x = Date)) +
  geom_line(aes(y = Observed), color = "blue") +
  geom_line(aes(y = Fitted), color = "red", linetype = "dashed") +
  labs(
    x = "Date", 
    y = "Température (°C)", 
    title = "Modèle Ajusté et Série Originale",
    subtitle = "Série originale en bleu et modèle ajusté en rouge"
  ) +
  theme_minimal()


# Si nécessaire, ajustez le début de la série temporelle
temp_ts <- ts(temp_dijon$TAVG_Celsius, start = c(2000, 1), frequency = 365.25)

# Ajuster un modèle SARIMA automatique à la série temporelle
model_sarima <- arima(temp_ts, order=c(1,0,2))

# Prévoir la température pour le 1er janvier 2021
forecast_temp <- forecast(model_sarima, h=1) # h est le nombre de périodes à prévoir
forecast_temp
